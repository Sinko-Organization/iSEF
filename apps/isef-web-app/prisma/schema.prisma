// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    isVerified        Boolean @default(false)
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Student {
    id              String          @id @default(cuid())
    studentIdNumber String          @unique @map("student_id_number")
    firstName       String          @map("first_name")
    middleName      String?         @map("middle_name")
    lastName        String          @map("last_name")
    email           String?         @unique
    phoneNumber     String?         @map("phone_number")
    address         String?
    createdAt       DateTime        @default(now()) @map("created_at")
    updatedAt       DateTime        @updatedAt @map("updated_at")
    studentRecords  StudentRecord[]
}

model SchoolYear {
    id             String          @id @default(cuid())
    startYear      Int             @unique @map("start_year")
    endYear        Int             @unique @map("end_year")
    createdAt      DateTime        @default(now()) @map("created_at")
    updatedAt      DateTime        @updatedAt @map("updated_at")
    studentRecords StudentRecord[]
}

model StudentRecord {
    id           String       @id @default(cuid())
    studentId    String       @map("student_id")
    subjectId    String       @map("subject_id")
    courseId     String       @map("course_id")
    yearLevel    Int          @map("year_level")
    schoolYearId String
    semesterType SemesterType
    grade        Float
    createdAt    DateTime     @default(now()) @map("created_at")
    updatedAt    DateTime     @updatedAt @map("updated_at")
    student      Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
    subject      Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
    course       Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
    schoolYear   SchoolYear   @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)
}

model Course {
    id             String          @id @default(cuid())
    name           String
    code           String          @unique @map("course_code")
    createdAt      DateTime        @default(now()) @map("created_at")
    updatedAt      DateTime        @updatedAt @map("updated_at")
    studentRecords StudentRecord[]
}

model Teacher {
    id         String   @id @default(cuid())
    firstName  String   @map("first_name")
    middleName String?  @map("middle_name")
    lastName   String   @map("last_name")
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @updatedAt @map("updated_at")
}

model Subject {
    id             String          @id @default(cuid())
    name           String
    stubCode       String          @unique @map("stub_code")
    units          Int
    createdAt      DateTime        @default(now()) @map("created_at")
    updatedAt      DateTime        @updatedAt @map("updated_at")
    studentRecords StudentRecord[]
}

enum SemesterType {
    FIRST
    SECOND
    SUMMER
}
